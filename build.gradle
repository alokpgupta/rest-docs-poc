/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/java_library_plugin.html
 */
buildscript {
    ext {
        springBootVersion = '2.0.0.M7'
    }
    
  repositories {
    mavenCentral()
    
	maven { url 'https://repo.spring.io/libs-snapshot' }
  }
  
  dependencies {
    // this plugin
    classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:latest.integration'

	classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

plugins {
    id 'net.ltgt.apt' version '0.10'
    id 'io.franzbecker.gradle-lombok' version '1.11'
    id "org.asciidoctor.convert" version "1.5.6"
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'jsonschema2pojo'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'

mainClassName = 'io.gati.web.WebApplication'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    
    maven {
    		url= "http://repo.spring.io/milestone/"
    }
}

lombok {
	sha256=""
}

configurations {
    compile.exclude module: 'spring-webmvc'
}

ext { 
	snippetsDir = file('build/generated-snippets')
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux
	api group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.0.0.M7'
	api group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.0.0.M7'
	// https://mvnrepository.com/artifact/org.springframework/spring-webflux
	api group: 'org.springframework', name: 'spring-webflux', version: '5.0.2.RELEASE'

	

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	api group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    	compileOnly 'org.projectlombok:lombok:1.16.18'
	
	apt "org.projectlombok:lombok:1.16.18"
	
	// https://mvnrepository.com/artifact/javax.el/javax.el-api
	runtime group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
	runtime group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
	

	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.0.RELEASE' 
	testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-webtestclient', version: '2.0.0.RELEASE'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation group: 'com.google.guava', name: 'guava', version: '23.6-jre'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.0.M7'
	
	// https://mvnrepository.com/artifact/io.projectreactor/reactor-test
	testCompile group: 'io.projectreactor', name: 'reactor-test', version: '3.1.2.RELEASE'
	
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'

	
	
	testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs 'src/main/java'
      srcDirs '${project.buildDir}/generated-sources/js2p'
    }
  }
}

test { 
	def testGroup = System.getProperty("test-groups")
    systemProperty "test-groups", testGroup == null ? "all" : testGroup
	outputs.dir snippetsDir
}

asciidoctor { 
	attributes 'snippets': snippetsDir 
	inputs.dir snippetsDir 
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

bootJar {
	dependsOn asciidoctor 
	from ("${asciidoctor.outputDir}/html5") { 
		into 'BOOT-INF/classes/static/docs'
	}
}

task copyFiles {
    doLast {
        copy {
            from "${asciidoctor.outputDir}/html5"
            into "${project.buildDir}/resources/main/static/docs"
        }
    }    
}

bootRun.dependsOn(copyFiles)

jsonSchema2Pojo {
  targetPackage = 'io.gati.web.model'
  includeJsr303Annotations = true
  annotationStyle = 'jackson2'
  propertyWordDelimiters = ['_'] as char[]
  useCommonsLang3 = true
  generateBuilders = true
  includeAdditionalProperties = false
  initializeCollections = false
  useBigDecimals = true
  removeOldOutput = true
}